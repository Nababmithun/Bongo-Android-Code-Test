// Generated by Dagger (https://google.github.io/dagger).
package com.movieplayer.base_mvvm.ui.activity.movie_details;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import com.movieplayer.base_mvvm.base.BaseActivity_MembersInjector;
import com.movieplayer.base_mvvm.data.local.SharedPrefManager;
import com.movieplayer.base_mvvm.utils.AlertService;
import com.movieplayer.base_mvvm.utils.AppLogger;
import com.movieplayer.base_mvvm.utils.NetworkUtils;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class MovieDetailsActivity_MembersInjector
    implements MembersInjector<MovieDetailsActivity> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  private final Provider<DispatchingAndroidInjector<Fragment>> mFragmentInjectorProvider;

  private final Provider<AlertService> mAlertServiceProvider;

  private final Provider<NetworkUtils> mNetworkUtilsProvider;

  private final Provider<AppLogger> mAppLoggerProvider;

  private final Provider<SharedPrefManager> mPrefManagerProvider;

  public MovieDetailsActivity_MembersInjector(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Fragment>> mFragmentInjectorProvider,
      Provider<AlertService> mAlertServiceProvider,
      Provider<NetworkUtils> mNetworkUtilsProvider,
      Provider<AppLogger> mAppLoggerProvider,
      Provider<SharedPrefManager> mPrefManagerProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.mFragmentInjectorProvider = mFragmentInjectorProvider;
    this.mAlertServiceProvider = mAlertServiceProvider;
    this.mNetworkUtilsProvider = mNetworkUtilsProvider;
    this.mAppLoggerProvider = mAppLoggerProvider;
    this.mPrefManagerProvider = mPrefManagerProvider;
  }

  public static MembersInjector<MovieDetailsActivity> create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider,
      Provider<DispatchingAndroidInjector<Fragment>> mFragmentInjectorProvider,
      Provider<AlertService> mAlertServiceProvider,
      Provider<NetworkUtils> mNetworkUtilsProvider,
      Provider<AppLogger> mAppLoggerProvider,
      Provider<SharedPrefManager> mPrefManagerProvider) {
    return new MovieDetailsActivity_MembersInjector(
        viewModelFactoryProvider,
        mFragmentInjectorProvider,
        mAlertServiceProvider,
        mNetworkUtilsProvider,
        mAppLoggerProvider,
        mPrefManagerProvider);
  }

  @Override
  public void injectMembers(MovieDetailsActivity instance) {
    BaseActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    BaseActivity_MembersInjector.injectMFragmentInjector(instance, mFragmentInjectorProvider.get());
    BaseActivity_MembersInjector.injectMAlertService(instance, mAlertServiceProvider.get());
    BaseActivity_MembersInjector.injectMNetworkUtils(instance, mNetworkUtilsProvider.get());
    BaseActivity_MembersInjector.injectMAppLogger(instance, mAppLoggerProvider.get());
    BaseActivity_MembersInjector.injectMPrefManager(instance, mPrefManagerProvider.get());
  }
}

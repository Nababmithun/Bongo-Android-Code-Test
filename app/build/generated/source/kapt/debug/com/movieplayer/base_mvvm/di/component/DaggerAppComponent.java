// Generated by Dagger (https://google.github.io/dagger).
package com.movieplayer.base_mvvm.di.component;

import android.app.Activity;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.movieplayer.base_mvvm.base.BaseActivity_MembersInjector;
import com.movieplayer.base_mvvm.base.BaseApplication;
import com.movieplayer.base_mvvm.base.BaseApplication_MembersInjector;
import com.movieplayer.base_mvvm.base.ViewModelFactory;
import com.movieplayer.base_mvvm.base.ViewModelFactory_Factory;
import com.movieplayer.base_mvvm.data.local.SharedPrefManager;
import com.movieplayer.base_mvvm.data.remote.ApiServiceBuilder;
import com.movieplayer.base_mvvm.data.remote.api_service.TheMovieDbApiService;
import com.movieplayer.base_mvvm.di.module.ActivityBindingModule_BidndMovieDetailsActivity;
import com.movieplayer.base_mvvm.di.module.ActivityBindingModule_BidndPopularMoviesActivity;
import com.movieplayer.base_mvvm.di.module.ApplicationModule;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvideAlertServiceFactory;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvideAppLoggerFactory;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvideAppScheduleFactory;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvideContextFactory;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvideNetworkUtilsFactory;
import com.movieplayer.base_mvvm.di.module.ApplicationModule_ProvidePreferenceManagerFactory;
import com.movieplayer.base_mvvm.di.module.NetworkModule;
import com.movieplayer.base_mvvm.di.module.NetworkModule_ProvideApiServiceBuilderFactory;
import com.movieplayer.base_mvvm.di.module.NetworkModule_ProvideRetrofitApiClientFactory;
import com.movieplayer.base_mvvm.di.module.NetworkModule_ProvideTheMovieDbApiServiceFactory;
import com.movieplayer.base_mvvm.rx.AppSchedulerProvider;
import com.movieplayer.base_mvvm.ui.activity.movie.PopularMoviesActivity;
import com.movieplayer.base_mvvm.ui.activity.movie.PopularMoviesViewModel;
import com.movieplayer.base_mvvm.ui.activity.movie.PopularMoviesViewModel_Factory;
import com.movieplayer.base_mvvm.ui.activity.movie_details.MovieDetailsActivity;
import com.movieplayer.base_mvvm.ui.activity.movie_details.MovieDetailsViewModel;
import com.movieplayer.base_mvvm.ui.activity.movie_details.MovieDetailsViewModel_Factory;
import com.movieplayer.base_mvvm.utils.AlertService;
import com.movieplayer.base_mvvm.utils.AppLogger;
import com.movieplayer.base_mvvm.utils.NetworkUtils;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<
          ActivityBindingModule_BidndPopularMoviesActivity.PopularMoviesActivitySubcomponent
              .Builder>
      popularMoviesActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent.Builder>
      movieDetailsActivitySubcomponentBuilderProvider;

  private Provider<AppSchedulerProvider> provideAppScheduleProvider;

  private Provider<BaseApplication> applicationProvider;

  private ApplicationModule_ProvideContextFactory provideContextProvider;

  private Provider<NetworkUtils> provideNetworkUtilsProvider;

  private Provider<SharedPrefManager> providePreferenceManagerProvider;

  private Provider<Retrofit> provideRetrofitApiClientProvider;

  private Provider<ApiServiceBuilder> provideApiServiceBuilderProvider;

  private Provider<TheMovieDbApiService> provideTheMovieDbApiServiceProvider;

  private PopularMoviesViewModel_Factory popularMoviesViewModelProvider;

  private MovieDetailsViewModel_Factory movieDetailsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private Provider<AlertService> provideAlertServiceProvider;

  private Provider<AppLogger> provideAppLoggerProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(
            PopularMoviesActivity.class,
            (Provider) popularMoviesActivitySubcomponentBuilderProvider)
        .put(MovieDetailsActivity.class, (Provider) movieDetailsActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.popularMoviesActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_BidndPopularMoviesActivity.PopularMoviesActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBindingModule_BidndPopularMoviesActivity.PopularMoviesActivitySubcomponent
                  .Builder
              get() {
            return new PopularMoviesActivitySubcomponentBuilder();
          }
        };
    this.movieDetailsActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent
                  .Builder
              get() {
            return new MovieDetailsActivitySubcomponentBuilder();
          }
        };
    this.provideAppScheduleProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideAppScheduleFactory.create(builder.applicationModule));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        ApplicationModule_ProvideContextFactory.create(
            builder.applicationModule, applicationProvider);
    this.provideNetworkUtilsProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideNetworkUtilsFactory.create(builder.applicationModule));
    this.providePreferenceManagerProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvidePreferenceManagerFactory.create(
                builder.applicationModule, provideContextProvider));
    this.provideRetrofitApiClientProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitApiClientFactory.create(
                builder.networkModule,
                provideContextProvider,
                provideNetworkUtilsProvider,
                providePreferenceManagerProvider));
    this.provideApiServiceBuilderProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideApiServiceBuilderFactory.create(
                builder.networkModule, provideRetrofitApiClientProvider));
    this.provideTheMovieDbApiServiceProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideTheMovieDbApiServiceFactory.create(
                builder.networkModule, provideApiServiceBuilderProvider));
    this.popularMoviesViewModelProvider =
        PopularMoviesViewModel_Factory.create(
            provideAppScheduleProvider, provideTheMovieDbApiServiceProvider);
    this.movieDetailsViewModelProvider =
        MovieDetailsViewModel_Factory.create(
            provideAppScheduleProvider, provideTheMovieDbApiServiceProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2)
            .put(PopularMoviesViewModel.class, (Provider) popularMoviesViewModelProvider)
            .put(MovieDetailsViewModel.class, (Provider) movieDetailsViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
    this.provideAlertServiceProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideAlertServiceFactory.create(
                builder.applicationModule, provideContextProvider));
    this.provideAppLoggerProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideAppLoggerFactory.create(builder.applicationModule));
  }

  @Override
  public void inject(BaseApplication app) {
    injectBaseApplication(app);
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    BaseApplication_MembersInjector.injectMActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private ApplicationModule applicationModule;

    private NetworkModule networkModule;

    private BaseApplication application;

    @Override
    public AppComponent build() {
      if (applicationModule == null) {
        this.applicationModule = new ApplicationModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (application == null) {
        throw new IllegalStateException(BaseApplication.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(BaseApplication application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class PopularMoviesActivitySubcomponentBuilder
      extends ActivityBindingModule_BidndPopularMoviesActivity.PopularMoviesActivitySubcomponent
          .Builder {
    private PopularMoviesActivity seedInstance;

    @Override
    public ActivityBindingModule_BidndPopularMoviesActivity.PopularMoviesActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            PopularMoviesActivity.class.getCanonicalName() + " must be set");
      }
      return new PopularMoviesActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PopularMoviesActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PopularMoviesActivitySubcomponentImpl
      implements ActivityBindingModule_BidndPopularMoviesActivity
          .PopularMoviesActivitySubcomponent {
    private PopularMoviesActivitySubcomponentImpl(
        PopularMoviesActivitySubcomponentBuilder builder) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                  emptyMap());
    }

    @Override
    public void inject(PopularMoviesActivity arg0) {
      injectPopularMoviesActivity(arg0);
    }

    private PopularMoviesActivity injectPopularMoviesActivity(PopularMoviesActivity instance) {
      BaseActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseActivity_MembersInjector.injectMFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectMAlertService(
          instance, DaggerAppComponent.this.provideAlertServiceProvider.get());
      BaseActivity_MembersInjector.injectMNetworkUtils(
          instance, DaggerAppComponent.this.provideNetworkUtilsProvider.get());
      BaseActivity_MembersInjector.injectMAppLogger(
          instance, DaggerAppComponent.this.provideAppLoggerProvider.get());
      BaseActivity_MembersInjector.injectMPrefManager(
          instance, DaggerAppComponent.this.providePreferenceManagerProvider.get());
      return instance;
    }
  }

  private final class MovieDetailsActivitySubcomponentBuilder
      extends ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent
          .Builder {
    private MovieDetailsActivity seedInstance;

    @Override
    public ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            MovieDetailsActivity.class.getCanonicalName() + " must be set");
      }
      return new MovieDetailsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MovieDetailsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MovieDetailsActivitySubcomponentImpl
      implements ActivityBindingModule_BidndMovieDetailsActivity.MovieDetailsActivitySubcomponent {
    private MovieDetailsActivitySubcomponentImpl(MovieDetailsActivitySubcomponentBuilder builder) {}

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                  emptyMap());
    }

    @Override
    public void inject(MovieDetailsActivity arg0) {
      injectMovieDetailsActivity(arg0);
    }

    private MovieDetailsActivity injectMovieDetailsActivity(MovieDetailsActivity instance) {
      BaseActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      BaseActivity_MembersInjector.injectMFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      BaseActivity_MembersInjector.injectMAlertService(
          instance, DaggerAppComponent.this.provideAlertServiceProvider.get());
      BaseActivity_MembersInjector.injectMNetworkUtils(
          instance, DaggerAppComponent.this.provideNetworkUtilsProvider.get());
      BaseActivity_MembersInjector.injectMAppLogger(
          instance, DaggerAppComponent.this.provideAppLoggerProvider.get());
      BaseActivity_MembersInjector.injectMPrefManager(
          instance, DaggerAppComponent.this.providePreferenceManagerProvider.get());
      return instance;
    }
  }
}
